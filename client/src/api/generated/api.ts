/* tslint:disable */
/* eslint-disable */
/**
 * Poker
 * The poker API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface DrawCardRequestDto
 */
export interface DrawCardRequestDto {
  /**
   * 手札
   * @type {Array<string>}
   * @memberof DrawCardRequestDto
   */
  hand: Array<string>;
}
/**
 *
 * @export
 * @interface PlayPokerRequestDto
 */
export interface PlayPokerRequestDto {
  /**
   * 手札のリスト
   * @type {Array<string>}
   * @memberof PlayPokerRequestDto
   */
  handList: Array<string>;
}
/**
 *
 * @export
 * @interface PokerJudgeRequestDto
 */
export interface PokerJudgeRequestDto {
  /**
   * 手札
   * @type {string}
   * @memberof PokerJudgeRequestDto
   */
  hand: string;
}
/**
 *
 * @export
 * @interface PokerJudgeResponse
 */
export interface PokerJudgeResponse {
  /**
   * 手札
   * @type {string}
   * @memberof PokerJudgeResponse
   */
  hand: string;
  /**
   * カードリスト
   * @type {Array<string>}
   * @memberof PokerJudgeResponse
   */
  cardList: Array<string>;
  /**
   * 役
   * @type {string}
   * @memberof PokerJudgeResponse
   */
  role: PokerJudgeResponseRoleEnum;
}

export const PokerJudgeResponseRoleEnum = {
  StraightFlash: "STRAIGHT_FLASH",
  Flash: "FLASH",
  Straight: "STRAIGHT",
  OnePair: "ONE_PAIR",
  TwoPair: "TWO_PAIR",
  ThreeCard: "THREE_CARD",
  FourCard: "FOUR_CARD",
  FullHouse: "FULL_HOUSE",
  NoRole: "NO_ROLE",
} as const;

export type PokerJudgeResponseRoleEnum =
  typeof PokerJudgeResponseRoleEnum[keyof typeof PokerJudgeResponseRoleEnum];

/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckControllerHealthCheck: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/health-check`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    HealthCheckApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckControllerHealthCheck(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthCheckControllerHealthCheck(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthCheckApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckControllerHealthCheck(options?: any): AxiosPromise<void> {
      return localVarFp
        .healthCheckControllerHealthCheck(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthCheckApi
   */
  public healthCheckControllerHealthCheck(options?: AxiosRequestConfig) {
    return HealthCheckApiFp(this.configuration)
      .healthCheckControllerHealthCheck(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PokerApi - axios parameter creator
 * @export
 */
export const PokerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerDraw: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/poker/draw`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PokerJudgeRequestDto} pokerJudgeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerJudgeRole: async (
      pokerJudgeRequestDto: PokerJudgeRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pokerJudgeRequestDto' is not null or undefined
      assertParamExists(
        "pokerControllerJudgeRole",
        "pokerJudgeRequestDto",
        pokerJudgeRequestDto
      );
      const localVarPath = `/poker/judge`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pokerJudgeRequestDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PlayPokerRequestDto} playPokerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerPlay: async (
      playPokerRequestDto: PlayPokerRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'playPokerRequestDto' is not null or undefined
      assertParamExists(
        "pokerControllerPlay",
        "playPokerRequestDto",
        playPokerRequestDto
      );
      const localVarPath = `/poker/play`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        playPokerRequestDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerWelcome: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/poker`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PokerApi - functional programming interface
 * @export
 */
export const PokerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PokerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pokerControllerDraw(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DrawCardRequestDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.pokerControllerDraw(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PokerJudgeRequestDto} pokerJudgeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pokerControllerJudgeRole(
      pokerJudgeRequestDto: PokerJudgeRequestDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PokerJudgeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.pokerControllerJudgeRole(
          pokerJudgeRequestDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PlayPokerRequestDto} playPokerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pokerControllerPlay(
      playPokerRequestDto: PlayPokerRequestDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PokerJudgeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.pokerControllerPlay(
          playPokerRequestDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pokerControllerWelcome(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.pokerControllerWelcome(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PokerApi - factory interface
 * @export
 */
export const PokerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PokerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerDraw(options?: any): AxiosPromise<DrawCardRequestDto> {
      return localVarFp
        .pokerControllerDraw(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PokerJudgeRequestDto} pokerJudgeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerJudgeRole(
      pokerJudgeRequestDto: PokerJudgeRequestDto,
      options?: any
    ): AxiosPromise<PokerJudgeResponse> {
      return localVarFp
        .pokerControllerJudgeRole(pokerJudgeRequestDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PlayPokerRequestDto} playPokerRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerPlay(
      playPokerRequestDto: PlayPokerRequestDto,
      options?: any
    ): AxiosPromise<PokerJudgeResponse> {
      return localVarFp
        .pokerControllerPlay(playPokerRequestDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pokerControllerWelcome(options?: any): AxiosPromise<void> {
      return localVarFp
        .pokerControllerWelcome(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PokerApi - object-oriented interface
 * @export
 * @class PokerApi
 * @extends {BaseAPI}
 */
export class PokerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PokerApi
   */
  public pokerControllerDraw(options?: AxiosRequestConfig) {
    return PokerApiFp(this.configuration)
      .pokerControllerDraw(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PokerJudgeRequestDto} pokerJudgeRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PokerApi
   */
  public pokerControllerJudgeRole(
    pokerJudgeRequestDto: PokerJudgeRequestDto,
    options?: AxiosRequestConfig
  ) {
    return PokerApiFp(this.configuration)
      .pokerControllerJudgeRole(pokerJudgeRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlayPokerRequestDto} playPokerRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PokerApi
   */
  public pokerControllerPlay(
    playPokerRequestDto: PlayPokerRequestDto,
    options?: AxiosRequestConfig
  ) {
    return PokerApiFp(this.configuration)
      .pokerControllerPlay(playPokerRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PokerApi
   */
  public pokerControllerWelcome(options?: AxiosRequestConfig) {
    return PokerApiFp(this.configuration)
      .pokerControllerWelcome(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
